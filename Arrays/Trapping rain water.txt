class Solution {
    public int trap(int[] height) {
        //prefix max and suffix max method with time complexioty O(N) && space comlexityO(2N);
        // int prefix[]=new int[height.length];
        // int suff[]=new int[height.length];
        // int n=height.length;
        // prefix[0]=height[0];
        // suff[n-1]=height[n-1];
        // for(int i=1;i<height.length;i++){
        //     if(prefix[i-1]<=height[i])prefix[i]=height[i];
        //     else prefix[i]=prefix[i-1];
        // }
        // for(int i=n-2;i>=0;i--){
        //     if(suff[i+1]<=height[i])suff[i]=height[i];
        //     else suff[i]=suff[i+1];
        // }
        // int ans=0;
        // for(int i=0;i<n;i++){
        //       ans+=(Math.min(prefix[i],suff[i])-height[i]);
        // }
        // System.out.println(Arrays.toString(prefix)+" "+Arrays.toString(suff));
        // return ans;
        

        //using two pointer with no extra space
        int left=0,right=height.length-1;
        int n=height.length-1;
        int res=0;
        int leftmax=0,rightmax=0;
        while(left<=right){
              if(height[left]<=height[right]){
                  if(height[left]>=leftmax)leftmax=height[left];
                  else{
                      res+=leftmax-height[left];
                  }
                  left++;
              }else{
                   if(height[right]>=rightmax)rightmax=height[right];
                  else{
                      res+=rightmax-height[right];
                  }
                  right--;
              }

        }
        return res;
    }
}