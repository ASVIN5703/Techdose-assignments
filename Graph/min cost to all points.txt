class Solution {
    public int minCostConnectPoints(int[][] points) {
        int cost = 0;
        HashSet<Integer> visited = new HashSet<>();

        PriorityQueue<Pair> pq = new PriorityQueue<>();
        pq.add(new Pair(0, 0, 0));

        int num = points.length;

        while(pq.size()!=0 && visited.size()<num){
            Pair curr = pq.poll();

            int endId = curr.endIndex;
            int currCost = curr.manhattenDist;

            if(visited.contains(endId)){
                continue;
            }
            visited.add(endId);

            cost = cost + currCost;
           System.out.println(cost);
            for(int i=0; i<num; i++){
                if(!visited.contains(i)){
                    pq.add(new Pair(endId, i, distance(points, endId, i)));
                    Pair pr=pq.peek();
                    //System.out.println(pr.startIndex);
                }
            }
        }
        return cost;
    }
    private int distance(int[][] points, int i, int j){
        return Math.abs(points[i][0] - points[j][0]) + Math.abs(points[i][1] - points[j][1]);
    }
}
class Pair implements Comparable <Pair>{
    int startIndex;
    int endIndex;
    int manhattenDist;

    Pair(int startIndex, int endIndex, int manhattenDist){
        this.startIndex = startIndex;
        this.endIndex = endIndex;
        this.manhattenDist = manhattenDist;
    }
    public int compareTo(Pair that){
        return this.manhattenDist - that.manhattenDist;
    }
}