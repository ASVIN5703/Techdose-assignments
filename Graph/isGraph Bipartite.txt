class Solution {
    public boolean isBipartite(int[][] graph) {
        List<List<Integer>> adj=new ArrayList<>();
        int n=graph.length;
        for(int i=0;i<n;i++)adj.add(new ArrayList<>());
        for(int i=0;i<n;i++){
            for(int j=0;j<graph[i].length;j++){
            adj.get(i).add(graph[i][j]);
            }
        }
        //System.out.println(graph[0].length);
      int vis[]=new int[graph.length];
      Arrays.fill(vis,-1);
        for(int i=0;i<n;i++){
            if(vis[i]==-1){
                if(!dfs(adj,i,vis,0))return false;
            }
        }
        return true;
    }
    public static boolean dfs(List<List<Integer>> adj,int node,int vis[],int color){
          vis[node]=color;
           for(int it :adj.get(node)){
              
               if(vis[it]==-1){
                   if(!dfs(adj,it,vis,color==0?1:0))
                    return false;
               }
               else if(vis[it]==color){
                     
                     return false;
               } 
           }
           
           return true;
    }
}